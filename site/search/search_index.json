{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"\u041d\u0430\u0447\u0430\u043b\u043e"},{"location":"getting-started/","text":"Getting started \u00b6 Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section. Installation \u00b6 with pip recommended \u00b6 Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately. with docker \u00b6 The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image. with git \u00b6 Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"Installation"},{"location":"getting-started/#getting-started","text":"Material for MkDocs is a theme for MkDocs , a static site generator geared towards (technical) project documentation. If you're familiar with Python, you can install Material for MkDocs with pip , the Python package manager. If not, we recommended using docker . In case you're running into problems, consult the troubleshooting section.","title":"Getting started"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#with-pip-recommended","text":"Material for MkDocs can be installed with pip : pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Material for MkDocs always strives to support the latest versions, so there's no need to install those packages separately.","title":"with pip"},{"location":"getting-started/#with-docker","text":"The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-material The mkdocs executable is provided as an entry point and serve is the default command. If you're not familiar with Docker don't worry, we have you covered in the following sections. The following plugins are bundled with the Docker image: mkdocs-minify-plugin mkdocs-redirects How to add plugins to the Docker image? Material for MkDocs bundles useful and common plugins while trying not to blow up the size of the official image. If the plugin you want to use is not included, create a new Dockerfile and extend the official Docker image with your custom installation routine: FROM squidfunk/mkdocs-material RUN pip install ... Next, you can build the image with the following command: docker build -t squidfunk/mkdocs-material . The new image can be used exactly like the official image.","title":"with docker"},{"location":"getting-started/#with-git","text":"Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material . When cloning from git , you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt","title":"with git"},{"location":"insiders/","text":"Insiders \u00b6 Material for MkDocs follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders . Read on to learn [how sponsorship works][1], and how easy it is to [get access to Insiders][2]. How sponsorship works \u00b6 New features first land in Insiders, so eligible sponsors have immediate access . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released for general availability. Bugfixes are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, Material for MkDocs already has tons of features available, so chances are that most of your requirements are already satisfied. See the [list of exclusive features][4] to learn which features are currently only available to sponsors. You may ask yourself why you should pay for something that is Open Source. Doesn't that contradict the ethos of Open Source software? Yes and no. Yes, some features are locked behind a monthly subscription, which means they are only accessible when paying a small amount of money. No, the features are only exclusive for a short time until specific funding goals are hit. Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Material for MkDocs, you can be sure that bugs are fixed quickly and new features are added regularly. \u21a9","title":"Sponsorship"},{"location":"insiders/#insiders","text":"Material for MkDocs follows the sponsorware release strategy, which means that new features are first exclusively released to sponsors as part of Insiders . Read on to learn [how sponsorship works][1], and how easy it is to [get access to Insiders][2].","title":"Insiders"},{"location":"insiders/#how-sponsorship-works","text":"New features first land in Insiders, so eligible sponsors have immediate access . Every feature is tied to a funding goal in monthly subscriptions. When a funding goal is hit, the features that are tied to it are merged back into Material for MkDocs and released for general availability. Bugfixes are always released simultaneously in both editions. 1 Don't want to sponsor? No problem, Material for MkDocs already has tons of features available, so chances are that most of your requirements are already satisfied. See the [list of exclusive features][4] to learn which features are currently only available to sponsors. You may ask yourself why you should pay for something that is Open Source. Doesn't that contradict the ethos of Open Source software? Yes and no. Yes, some features are locked behind a monthly subscription, which means they are only accessible when paying a small amount of money. No, the features are only exclusive for a short time until specific funding goals are hit. Making an Open Source project sustainable is exceptionally hard: maintainers burn out, projects are abandoned. That's not great and very unpredictable. The sponsorware model ensures that if you decide to use Material for MkDocs, you can be sure that bugs are fixed quickly and new features are added regularly. \u21a9","title":"How sponsorship works"},{"location":"reference/code-blocks/","text":"Code blocks \u00b6 Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter. Configuration \u00b6 Highlight \u00b6 Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time by Pygments or runtime with a JavaScript highlighter. Remember to add the necessary additional stylesheets and JavaScript if you want to use the latter: Pygments markdown_extensions : - pymdownx.highlight - pymdownx.superfences JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : false Syntax highlighting with Highlight.js Highlight.js can be integrated by creating an additional JavaScript file initializing the highlighter and including the respective stylesheet and JavaScript from a CDN serving Highlight.js in mkdocs.yml : docs/javascripts/config.js document $ . subscribe (() => { hljs . highlightAll () }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/config.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers later in this document, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, all of which are supported by Material for MkDocs. While table wraps a code block in a table, inline and pymdownx-inline render line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of table or pymdownx-inline is recommended. Material for MkDocs doesn't provide official support for the other options of this extension, so they may be supported but might yield unexpected results. Use them at your own risk. InlineHilite \u00b6 Source \u00b7 Extension The InlineHilite extension, which is part of Python Markdown Extensions also integrates with Material for MkDocs and adds support for syntax highlighting of inline code blocks . It's built on top of the Highlight extension and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.inlinehilite See the section on inline code blocks for usage information. Keys \u00b6 Source \u00b7 Extension The Keys extension, which is part of Python Markdown Extensions , allows for inserting keyboard keys , e.g. Ctrl + Alt + Del , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.keys SuperFences \u00b6 The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code blocks inside other blocks , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences Snippets \u00b6 The Snippets extension, which is also part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets Usage \u00b6 This section discusses how to use different syntax highlighting features with Pygments \u2013 the default highlighter \u2013 so they don't apply when using a JavaScript syntax highlighter. Specifying the language \u00b6 Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf Adding annotations \u00b6 Source \u00b7 Experimental \u00b7 Insiders only Annotations offer a comfortable and friendly way to attach explanations to arbitrary sections of code blocks by adding simple markers within block/inline comments that refer to items of a list following the code block, i.e. (1) , (2) , etc. Material for MkDocs detaches the list from the flow of the document, injects the content of each list item into a tooltip, and links each list marker to the corresponding tooltip. In order to opt-in to annotation support, a slightly different syntax is required \u2013 just add the respective language short code and the .annotate class, after the three backticks. Alternatively, if you want to enable annotations globally, add the following to mkdocs.yml : theme : features : - content.code.annotate Note that annotations can be placed anywhere in a code block where a comment for the language can be placed, which for JavaScript is // (1) and /* (2) */ , for Yaml # (3) , etc. Example : ``` js document$.subscribe(function() { // (1) var tables = document.querySelectorAll(/* (2) */ \"article table\") tables.forEach(function(table) { new Tablesort(table) }) }) ``` 1. ... 2. ... Result : document $ . subscribe ( function () { // (1) var tables = document . querySelectorAll ( /* (2) */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) // (3) }) }) Annotations can contain arbitrary content which is shown when the marker is focussed, including any kind of formatting, links, admonitions, details, and even diagrams: graph LR A[I'm] --> B{a} --> C[diagram]; Tip: You can use Tab to navigate annotations. Annotations can be placed anywhere in a code block were a comment for the underlying language can be placed. Python # (1) JavaScript // (2) /* (2) */ Lua -- (3) We're working on a solution for languages without comments, which will be available shortly. Of course, this can be combined with line numbers , highlighting and all other code block related features. Annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with other JavaScript-based syntax highlighters. Support may be added later on. Adding line numbers \u00b6 Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting specific lines \u00b6 Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Line ranges can also be used for conveniently specifying multiple lines. Example : ``` python hl_lines=\"2-5\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Highlighting inline code blocks \u00b6 When InlineHilite is enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the language short name . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers. Adding keyboard keys \u00b6 When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available key codes. Example : ++ctrl+alt+del++ Result : Ctrl + Alt + Del Embedding external files \u00b6 Also known as transcludes or file transclusion in MultiMarkdown . When Snippets is enabled, content from other files can be embedded, which is especially useful to reference and embed the contents of source files directly into your project documentation. Example : ``` --8<--\u200b \".browserslistrc\" ``` Result : last 4 years Note that Snippets is not limited to code blocks, but can be used anywhere from a document to move repeating content to separate files, which is also explained in the official documentation . Customization \u00b6 Custom syntax theme \u00b6 Source \u00b7 Difficulty: easy If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , Material for MkDocs assigns a single color to most of them. Create an additional stylesheet , and add: : root > * { --md-code-hl-string-color : #0FF1CE ; } If you want to tweak a specific type of string, i.e. `backticks` , you can lookup the specific class name in the syntax theme definition , and override it as part of your additional stylesheet: . highlight . sb { color : #0FF1CE ; }","title":"Code blocks"},{"location":"reference/code-blocks/#code-blocks","text":"Code blocks and examples are an essential part of technical project documentation. Material for MkDocs provides different ways to set up syntax highlighting for code blocks, either during build time using Pygments or during runtime using a JavaScript syntax highlighter.","title":"Code blocks"},{"location":"reference/code-blocks/#configuration","text":"","title":"Configuration"},{"location":"reference/code-blocks/#highlight","text":"Source \u00b7 Extension \u00b7 Supersedes: CodeHilite The Highlight extension, which is part of Python Markdown Extensions , integrates with Material for MkDocs and provides several options for configuring syntax highlighting of code blocks: use_pygments Default: true \u2013 This option allows to control whether highlighting should be carried out during build time by Pygments or runtime with a JavaScript highlighter. Remember to add the necessary additional stylesheets and JavaScript if you want to use the latter: Pygments markdown_extensions : - pymdownx.highlight - pymdownx.superfences JavaScript markdown_extensions : - pymdownx.highlight : use_pygments : false Syntax highlighting with Highlight.js Highlight.js can be integrated by creating an additional JavaScript file initializing the highlighter and including the respective stylesheet and JavaScript from a CDN serving Highlight.js in mkdocs.yml : docs/javascripts/config.js document $ . subscribe (() => { hljs . highlightAll () }) mkdocs.yml extra_javascript : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/highlight.min.js - javascripts/config.js extra_css : - https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/default.min.css Note that Highlight.js has no affiliation with the Highlight extension. linenums Default: false \u2013 This option will add line numbers to all code blocks. If you wish to add line numbers to some , but not all code blocks, consult the section on adding line numbers later in this document, which also contains some tips on working with line numbers: markdown_extensions : - pymdownx.highlight : linenums : true linenums_style Default: table \u2013 The Highlight extension provides three ways to add line numbers, all of which are supported by Material for MkDocs. While table wraps a code block in a table, inline and pymdownx-inline render line numbers as part of the line itself: markdown_extensions : - pymdownx.highlight : linenums_style : pymdownx-inline Note that inline will put line numbers next to the actual code, which means that they will be included when selecting text with the cursor or copying a code block to the clipboard. Thus, the usage of table or pymdownx-inline is recommended. Material for MkDocs doesn't provide official support for the other options of this extension, so they may be supported but might yield unexpected results. Use them at your own risk.","title":"Highlight"},{"location":"reference/code-blocks/#inlinehilite","text":"Source \u00b7 Extension The InlineHilite extension, which is part of Python Markdown Extensions also integrates with Material for MkDocs and adds support for syntax highlighting of inline code blocks . It's built on top of the Highlight extension and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.inlinehilite See the section on inline code blocks for usage information.","title":"InlineHilite"},{"location":"reference/code-blocks/#keys","text":"Source \u00b7 Extension The Keys extension, which is part of Python Markdown Extensions , allows for inserting keyboard keys , e.g. Ctrl + Alt + Del , and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.keys","title":"Keys"},{"location":"reference/code-blocks/#superfences","text":"The SuperFences extension, which is also part of Python Markdown Extensions , allows for the nesting of code blocks inside other blocks , and is therefore strongly recommended: markdown_extensions : - pymdownx.superfences","title":"SuperFences"},{"location":"reference/code-blocks/#snippets","text":"The Snippets extension, which is also part of Python Markdown Extensions , allows to insert content from other files or other, regular content, and can be enabled via mkdocs.yml : markdown_extensions : - pymdownx.snippets","title":"Snippets"},{"location":"reference/code-blocks/#usage","text":"This section discusses how to use different syntax highlighting features with Pygments \u2013 the default highlighter \u2013 so they don't apply when using a JavaScript syntax highlighter.","title":"Usage"},{"location":"reference/code-blocks/#specifying-the-language","text":"Code blocks must be enclosed with two separate lines containing three backticks. To add code highlighting to those blocks, add the language short name directly after the opening block. See the list of available lexers to find the short name for a given language. Example : ``` python import tensorflow as tf ``` Result : import tensorflow as tf","title":"Specifying the language"},{"location":"reference/code-blocks/#adding-annotations","text":"Source \u00b7 Experimental \u00b7 Insiders only Annotations offer a comfortable and friendly way to attach explanations to arbitrary sections of code blocks by adding simple markers within block/inline comments that refer to items of a list following the code block, i.e. (1) , (2) , etc. Material for MkDocs detaches the list from the flow of the document, injects the content of each list item into a tooltip, and links each list marker to the corresponding tooltip. In order to opt-in to annotation support, a slightly different syntax is required \u2013 just add the respective language short code and the .annotate class, after the three backticks. Alternatively, if you want to enable annotations globally, add the following to mkdocs.yml : theme : features : - content.code.annotate Note that annotations can be placed anywhere in a code block where a comment for the language can be placed, which for JavaScript is // (1) and /* (2) */ , for Yaml # (3) , etc. Example : ``` js document$.subscribe(function() { // (1) var tables = document.querySelectorAll(/* (2) */ \"article table\") tables.forEach(function(table) { new Tablesort(table) }) }) ``` 1. ... 2. ... Result : document $ . subscribe ( function () { // (1) var tables = document . querySelectorAll ( /* (2) */ \"article table\" ) tables . forEach ( function ( table ) { new Tablesort ( table ) // (3) }) }) Annotations can contain arbitrary content which is shown when the marker is focussed, including any kind of formatting, links, admonitions, details, and even diagrams: graph LR A[I'm] --> B{a} --> C[diagram]; Tip: You can use Tab to navigate annotations. Annotations can be placed anywhere in a code block were a comment for the underlying language can be placed. Python # (1) JavaScript // (2) /* (2) */ Lua -- (3) We're working on a solution for languages without comments, which will be available shortly. Of course, this can be combined with line numbers , highlighting and all other code block related features. Annotations require syntax highlighting with Pygments \u2013 they're currently not compatible with other JavaScript-based syntax highlighters. Support may be added later on.","title":"Adding annotations"},{"location":"reference/code-blocks/#adding-line-numbers","text":"Line numbers can be added to a code block by using the linenums=\"<start>\" option directly after the short name, whereas <start> represents the starting line number. A code block can start from a line number other than 1 , which allows splitting large code blocks for readability. Example : ``` python linenums=\"1\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : 1 2 3 4 5 def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"reference/code-blocks/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language short name. Note that line counts start at 1 , regardless of the starting line number specified as part of linenums . Example : ``` python hl_lines=\"2 3\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Line ranges can also be used for conveniently specifying multiple lines. Example : ``` python hl_lines=\"2-5\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result : def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] > items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"reference/code-blocks/#highlighting-inline-code-blocks","text":"When InlineHilite is enabled, inline code blocks can be highlighted by prefixing them with a shebang-like sequence, i.e. #! , directly followed by the language short name . Example : The `#!python range()` function is used to generate a sequence of numbers. Result : The range () function is used to generate a sequence of numbers.","title":"Highlighting inline code blocks"},{"location":"reference/code-blocks/#adding-keyboard-keys","text":"When Keys is enabled, keyboard keys can be rendered with a simple syntax. Consult the Python Markdown Extensions documentation to learn about all available key codes. Example : ++ctrl+alt+del++ Result : Ctrl + Alt + Del","title":"Adding keyboard keys"},{"location":"reference/code-blocks/#embedding-external-files","text":"Also known as transcludes or file transclusion in MultiMarkdown . When Snippets is enabled, content from other files can be embedded, which is especially useful to reference and embed the contents of source files directly into your project documentation. Example : ``` --8<--\u200b \".browserslistrc\" ``` Result : last 4 years Note that Snippets is not limited to code blocks, but can be used anywhere from a document to move repeating content to separate files, which is also explained in the official documentation .","title":"Embedding external files"},{"location":"reference/code-blocks/#customization","text":"","title":"Customization"},{"location":"reference/code-blocks/#custom-syntax-theme","text":"Source \u00b7 Difficulty: easy If Pygments is used, Material for MkDocs provides the styles for code blocks , which are built with a custom and well-balanced palette that works equally well for both color schemes : --md-code-hl-number-color --md-code-hl-special-color --md-code-hl-function-color --md-code-hl-constant-color --md-code-hl-keyword-color --md-code-hl-string-color --md-code-hl-name-color --md-code-hl-operator-color --md-code-hl-punctuation-color --md-code-hl-comment-color --md-code-hl-generic-color --md-code-hl-variable-color Code block foreground, background and line highlight colors are defined via: --md-code-fg-color --md-code-bg-color --md-code-hl-color Let's say you want to change the color of \"strings\" . While there are several types of string tokens , Material for MkDocs assigns a single color to most of them. Create an additional stylesheet , and add: : root > * { --md-code-hl-string-color : #0FF1CE ; } If you want to tweak a specific type of string, i.e. `backticks` , you can lookup the specific class name in the syntax theme definition , and override it as part of your additional stylesheet: . highlight . sb { color : #0FF1CE ; }","title":"Custom syntax theme"},{"location":"setup/changing-the-colors/","text":"Changing the colors \u00b6 As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables . Configuration \u00b6 Color palette \u00b6 Color scheme \u00b6 Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span:nth-child(7)\") name.textContent = attr }) }) Primary color \u00b6 Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color : red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Accent color \u00b6 Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color : .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) }) Color palette toggle \u00b6 Source \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : - scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode The following fields must be set for each toggle: icon Default: none \u00b7 Required \u2013 This field must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This field is used as the toggle's title attribute and should be set to a discernable name to improve accessibility. System preference \u00b6 Source \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media field next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. Accessibility \u2013 not all color combinations work well With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary. Customization \u00b6 Custom colors \u00b6 Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables. Custom color schemes \u00b6 Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* [0, 360] */ }","title":"Changing the colors"},{"location":"setup/changing-the-colors/#changing-the-colors","text":"As any proper Material Design implementation, Material for MkDocs supports Google's original color palette , which can be easily configured through mkdocs.yml . Furthermore, colors can be customized with a few lines of CSS to fit your brand's identity by using CSS variables .","title":"Changing the colors"},{"location":"setup/changing-the-colors/#configuration","text":"","title":"Configuration"},{"location":"setup/changing-the-colors/#color-palette","text":"","title":"Color palette"},{"location":"setup/changing-the-colors/#color-scheme","text":"Source \u00b7 Default: default Material for MkDocs supports two color schemes : a light mode, which is just called default , and a dark mode, which is called slate . The color scheme can be set via mkdocs.yml : theme : palette : scheme : default Click on a tile to change the color scheme : default slate var buttons = document.querySelectorAll(\"button[data-md-color-scheme]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-scheme\") document.body.setAttribute(\"data-md-color-scheme\", attr) var name = document.querySelector(\"#__code_1 code span:nth-child(7)\") name.textContent = attr }) })","title":"Color scheme"},{"location":"setup/changing-the-colors/#primary-color","text":"Source \u00b7 Default: indigo The primary color is used for the header, the sidebar, text links and several other components. In order to change the primary color, set the following value in mkdocs.yml to a valid color name: theme : palette : primary : indigo Click on a tile to change the primary color : red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange brown grey blue grey black white var buttons = document.querySelectorAll(\"button[data-md-color-primary]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-primary\") document.body.setAttribute(\"data-md-color-primary\", attr) var name = document.querySelector(\"#__code_2 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Primary color"},{"location":"setup/changing-the-colors/#accent-color","text":"Source \u00b7 Default: indigo The accent color is used to denote elements that can be interacted with, e.g. hovered links, buttons and scrollbars. It can be changed in mkdocs.yml by choosing a valid color name: theme : palette : accent : indigo Click on a tile to change the accent color : .md-typeset button[data-md-color-accent] > code { background-color: var(--md-code-bg-color); color: var(--md-accent-fg-color); } red pink purple deep purple indigo blue light blue cyan teal green light green lime yellow amber orange deep orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\") buttons.forEach(function(button) { button.addEventListener(\"click\", function() { var attr = this.getAttribute(\"data-md-color-accent\") document.body.setAttribute(\"data-md-color-accent\", attr) var name = document.querySelector(\"#__code_3 code span:nth-child(7)\") name.textContent = attr.replace(\"-\", \" \") }) })","title":"Accent color"},{"location":"setup/changing-the-colors/#color-palette-toggle","text":"Source \u00b7 Default: none It's also possible to offer a list of color palettes to the user, each of which can include a scheme , primary and accent color each. The user can toggle between those color palettes: theme : palette : - scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode The following fields must be set for each toggle: icon Default: none \u00b7 Required \u2013 This field must point to a valid icon path referencing any icon bundled with the theme , or the build will not succeed. Some popular combinations: + \u2013 material/toggle-switch-off-outline + material/toggle-switch + \u2013 material/weather-sunny + material/weather-night + \u2013 material/eye-outline + material/eye + \u2013 material/lightbulb-outline + material/lightbulb name Default: none \u00b7 Required \u2013 This field is used as the toggle's title attribute and should be set to a discernable name to improve accessibility.","title":"Color palette toggle"},{"location":"setup/changing-the-colors/#system-preference","text":"Source \u00b7 Default: none In order to automatically set the color palette to the user's system preference, a media query can be set as part of the media field next to the toggle definition in mkdocs.yml : theme : palette : - media : \"(prefers-color-scheme: light)\" scheme : default toggle : icon : material/toggle-switch-off-outline name : Switch to dark mode - media : \"(prefers-color-scheme: dark)\" scheme : slate toggle : icon : material/toggle-switch name : Switch to light mode When the user first visits your site, the media queries are evaluated in the order of their definition. The first media query that matches selects the default color palette. Accessibility \u2013 not all color combinations work well With 2 (color schemes) x 21 (primary colors) x 17 (accent color) = 714 combinations, it's impossible to ensure that all configurations provide a good user experience (e.g. yellow on light background ). Make sure that the color combination of your choosing provides enough contrast and tweak CSS variables where necessary.","title":"System preference"},{"location":"setup/changing-the-colors/#customization","text":"","title":"Customization"},{"location":"setup/changing-the-colors/#custom-colors","text":"Source \u00b7 Difficulty: easy Material for MkDocs implements colors using CSS variables (custom properties). If you want to customize the colors beyond the palette (e.g. to use your brand-specific colors), you can add an additional stylesheet and tweak the values of the CSS variables. Let's say you're YouTube , and want to set the primary color to your brand's palette. Just add: : root { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } See the file containing the color definitions for a list of all CSS variables.","title":"Custom colors"},{"location":"setup/changing-the-colors/#custom-color-schemes","text":"Source \u00b7 Difficulty: easy Besides overriding specific colors, you can create your own, named color scheme by wrapping the definitions in the [ data-md-color-scheme = \"...\" ] attribute selector , which you can then set via mkdocs.yml as described in the color schemes section: [ data-md-color-scheme = \"youtube\" ] { --md-primary-fg-color : #EE0F0F ; --md-primary-fg-color--light : #ECB7B7 ; --md-primary-fg-color--dark : #90030C ; } Additionally, the slate color scheme defines all of it's colors via hsla color functions and deduces its colors from the --md-hue CSS variable. You can tune the slate theme with: [ data-md-color-scheme = \"slate\" ] { --md-hue : 210 ; /* [0, 360] */ }","title":"Custom color schemes"}]}